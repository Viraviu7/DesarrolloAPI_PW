package com.shop.eShop.servicios;

import org.springframework.beans.factory.annotation.Autowired;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.shop.eShop.dto.cliente.ClienteDTO;
import com.shop.eShop.dto.cliente.ClienteMapper;
import com.shop.eShop.dto.pago.PagoDTO;
import com.shop.eShop.dto.pago.PagoMapper;
import com.shop.eShop.entities.Cliente;
import com.shop.eShop.entities.Pago;
import com.shop.eShop.repositories.ClienteRepository;
import com.shop.eShop.repositories.PagoRepository;
import com.shop.eShop.repositories.PedidoRepository;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class PagoServicio {
    /* C-> CREATE R-> READ U-> UPDATE D-> DELETE */
    @Autowired
    private PagoRepository pagoRepository;

    @Autowired
    private PedidoRepository pedidoRepository;
    // READ ALL
    public List<PagoDTO> getAllPagos() {
        try {
            List<Pago> pagos = pagoRepository.findAll();
            return pagos.stream().map(PagoMapper.INSTANCE::toDTO).toList();
        } catch (Exception e) {
            log.error("Error getting all pagos", e);
        }
        return List.of();
    }

    // READ ID
    public PagoDTO getPagoById(Long id) {
        try {
            if (id==null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Pago pago = pagoRepository.findById(id).orElse(null);
            return PagoMapper.INSTANCE.toDTO(pago);
        } catch (Exception e) {
            log.error("Error getting pago by id", e);
        }
        return null;
    }

    // CREATE
    public PagoDTO createPago(PagoDTO pagoDTO) {
        try {
            if (pagoDTO.idPago() != null) {
                throw new IllegalArgumentException("Id will be generated by database");
            }
            Pago pago = PagoMapper.INSTANCE.toEntity(pagoDTO);
            if (pago == null) {
                throw new IllegalArgumentException("Pago cannot be null");
            }
            pago = pagoRepository.save(pago);
            return PagoMapper.INSTANCE.toDTO(pago);

        } catch (Exception e) {
            log.error("Error creating pago", e);
        }
        return null;
    }

    // UPDATE
    public PagoDTO updatePago(Long id, PagoDTO pagoDTO) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Pago pagoFromDB = pagoRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Pago not found"));
            Pago pago = PagoMapper.INSTANCE.toEntity(pagoDTO);
            if (pago==null) {
                throw new IllegalArgumentException("Pago cannot be null");
            }
            //pagoFromDB.updateOnlyNecessary(pago);
            Pago savedPago = pagoRepository.save(pagoFromDB);
            return PagoMapper.INSTANCE.toDTO(savedPago);
        } catch (Exception e) {
            log.error("Error updating pago", e);
        }
        return null;
    }

    // DELETE
    public boolean deletePago(Long id) {
        try {
            if (id == null) {
                throw new IllegalArgumentException("Id cannot be null");
            }
            Pago pago = pagoRepository.findById(id).orElse(null);
            if (pago == null) {
                throw new IllegalArgumentException("Pago cannot be null");
            }
            pagoRepository.delete(pago);
            return true;
        } catch (Exception e) {
            log.error("Error deleting pago", e);
        }
        return false;
    }

    /* MÃ©todos del repository */
    /* Retrieve pagos within a date range */
    public List<PagoDTO> findByDate(Timestamp date1, Timestamp date2) {
        try {
            List<Pago> pagos = pagoRepository.findByFechaBetween(date1, date2).orElse(null);
            if (pagos==null) {
                throw new IllegalArgumentException("Los pagos no puede ser nulo");
            }
            return pagos.stream().map(PagoMapper.INSTANCE::toDTO).toList();
        } catch (Exception e) {
            log.error("Error obteniendo pagos por fecha", e);
        }
        return List.of();
    }

    /* Retrieve pagos by an order identifier and pago method */
    public PagoDTO findByOrderIdAndPagoMethod(Long orderId, String pagoMethod) {
        try {
            if (orderId==null) {
                throw new IllegalArgumentException("El ID del pedido no puede ser nulo");
            }
            Pago pagos = pagoRepository.findByIdPedidoAndMetodo(orderId, pagoMethod).orElse(null);
            if (pagos==null) {
                throw new IllegalArgumentException("El pago no puede ser nulo");
            }
            return PagoMapper.INSTANCE.toDTO(pagos);
        } catch (Exception e) {
            log.error("Error obteniendo los pagos por id del pedido y el metodo de pago", e);
        }
        return null;
    }
}
